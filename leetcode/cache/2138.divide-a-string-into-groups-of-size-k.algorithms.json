{"id":2260,"fid":"2138","name":"将字符串拆分为若干长度为 k 的组","slug":"divide-a-string-into-groups-of-size-k","link":"https://leetcode.cn/problems/divide-a-string-into-groups-of-size-k/description/","percent":67.27492082642135,"level":"Easy","category":"algorithms","en_name":"Divide a String Into Groups of Size k","cn_name":"将字符串拆分为若干长度为 k 的组","totalAC":"17.1K","totalSubmit":"24.3K","likes":22,"dislikes":0,"desc":"<p>字符串 <code>s</code> 可以按下述步骤划分为若干长度为 <code>k</code> 的组：</p>\n\n<ul>\n\t<li>第一组由字符串中的前 <code>k</code> 个字符组成，第二组由接下来的 <code>k</code> 个字符串组成，依此类推。每个字符都能够成为 <strong>某一个</strong> 组的一部分。</li>\n\t<li>对于最后一组，如果字符串剩下的字符 <strong>不足</strong> <code>k</code> 个，需使用字符 <code>fill</code> 来补全这一组字符。</li>\n</ul>\n\n<p>注意，在去除最后一个组的填充字符 <code>fill</code>（如果存在的话）并按顺序连接所有的组后，所得到的字符串应该是 <code>s</code> 。</p>\n\n<p>给你一个字符串 <code>s</code> ，以及每组的长度 <code>k</code> 和一个用于填充的字符 <code>fill</code> ，按上述步骤处理之后，返回一个字符串数组，该数组表示 <code>s</code> 分组后 <strong>每个组的组成情况</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>s = \"abcdefghi\", k = 3, fill = \"x\"\n<strong>输出：</strong>[\"abc\",\"def\",\"ghi\"]\n<strong>解释：</strong>\n前 3 个字符是 \"abc\" ，形成第一组。\n接下来 3 个字符是 \"def\" ，形成第二组。\n最后 3 个字符是 \"ghi\" ，形成第三组。\n由于所有组都可以由字符串中的字符完全填充，所以不需要使用填充字符。\n因此，形成 3 组，分别是 \"abc\"、\"def\" 和 \"ghi\" 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>s = \"abcdefghij\", k = 3, fill = \"x\"\n<strong>输出：</strong>[\"abc\",\"def\",\"ghi\",\"jxx\"]\n<strong>解释：</strong>\n与前一个例子类似，形成前三组 \"abc\"、\"def\" 和 \"ghi\" 。\n对于最后一组，字符串中仅剩下字符 'j' 可以用。为了补全这一组，使用填充字符 'x' 两次。\n因此，形成 4 组，分别是 \"abc\"、\"def\"、\"ghi\" 和 \"jxx\" 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> 仅由小写英文字母组成</li>\n\t<li><code>1 &lt;= k &lt;= 100</code></li>\n\t<li><code>fill</code> 是一个小写英文字母</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<string> divideString(string s, int k, char fill) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String[] divideString(String s, int k, char fill) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def divideString(self, s, k, fill):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :type fill: str\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def divideString(self, s: str, k: int, fill: str) -> List[str]:\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** divideString(char* s, int k, char fill, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string[] DivideString(string s, int k, char fill) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @param {number} k\n * @param {character} fill\n * @return {string[]}\n */\nvar divideString = function(s, k, fill) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function divideString(s: string, k: number, fill: string): string[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @param String $fill\n     * @return String[]\n     */\n    function divideString($s, $k, $fill) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func divideString(_ s: String, _ k: Int, _ fill: Character) -> [String] {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun divideString(s: String, k: Int, fill: Char): Array<String> {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<String> divideString(String s, int k, String fill) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func divideString(s string, k int, fill byte) []string {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @param {Integer} k\n# @param {Character} fill\n# @return {String[]}\ndef divide_string(s, k, fill)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def divideString(s: String, k: Int, fill: Char): Array[String] = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn divide_string(s: String, k: i32, fill: char) -> Vec<String> {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (divide-string s k fill)\n  (-> string? exact-integer? char? (listof string?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec divide_string(S :: unicode:unicode_binary(), K :: integer(), Fill :: char()) -> [unicode:unicode_binary()].\ndivide_string(S, K, Fill) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec divide_string(s :: String.t, k :: integer, fill :: char) :: [String.t]\n  def divide_string(s, k, fill) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func divideString(s: String, k: Int64, fill: Rune): Array<String> {\n\n    }\n}"}],"testcase":"\"abcdefghi\"\n3\n\"x\"","testable":true,"templateMeta":{"name":"divideString","params":[{"name":"s","type":"string"},{"type":"integer","name":"k"},{"type":"character","name":"fill"}],"return":{"type":"string[]"}}}