{"id":3241,"fid":"2966","name":"划分数组并满足最大差限制","slug":"divide-array-into-arrays-with-max-difference","link":"https://leetcode.cn/problems/divide-array-into-arrays-with-max-difference/description/","percent":69.21049857700011,"level":"Medium","category":"algorithms","en_name":"Divide Array Into Arrays With Max Difference","cn_name":"划分数组并满足最大差限制","totalAC":"18.6K","totalSubmit":"22.8K","likes":19,"dislikes":0,"desc":"<p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code>，以及一个正整数 <code>k</code> 。</p>\n\n<p>将这个数组划分为&nbsp;<code>n / 3</code>&nbsp;个长度为 <code>3</code> 的子数组，并满足以下条件：</p>\n\n<ul>\n\t<li>子数组中<strong> 任意 </strong>两个元素的差必须 <strong>小于或等于</strong> <code>k</code> 。</li>\n</ul>\n\n<p>返回一个<em> </em><strong>二维数组 </strong>，包含所有的子数组。如果不可能满足条件，就返回一个空数组。如果有多个答案，返回 <strong>任意一个</strong> 即可。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>nums = [1,3,4,8,7,9,3,5,1], k = 2</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>[[1,1,3],[3,4,5],[7,8,9]]</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>每个数组中任何两个元素之间的差小于或等于 2。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b></span><span class=\"example-io\">nums = [2,4,2,2,5,2], k = 2</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b></span><span class=\"example-io\">[]</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>将&nbsp;<code>nums</code>&nbsp;划分为 2 个长度为 3 的数组的不同方式有：</p>\n\n<ul>\n\t<li>[[2,2,2],[2,4,5]] （及其排列）</li>\n\t<li>[[2,2,4],[2,2,5]] （及其排列）</li>\n</ul>\n\n<p>因为有四个 2，所以无论我们如何划分，都会有一个包含元素 2 和 5 的数组。因为&nbsp;<code>5 - 2 = 3 &gt; k</code>，条件无法被满足，所以没有合法的划分。</p>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b></span><span class=\"example-io\">nums = [4,2,9,8,2,12,7,12,10,5,8,5,5,7,9,2,5,11], k = 14</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b></span><span class=\"example-io\">[[2,2,2],[4,5,5],[5,5,7],[7,8,8],[9,9,10],[11,12,12]]</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>每个数组中任何两个元素之间的差小于或等于 14。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>n</code> 是 <code>3</code> 的倍数</li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<vector<int>> divideArray(vector<int>& nums, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[][] divideArray(int[] nums, int k) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def divideArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def divideArray(self, nums: List[int], k: int) -> List[List[int]]:\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** divideArray(int* nums, int numsSize, int k, int* returnSize, int** returnColumnSizes) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[][] DivideArray(int[] nums, int k) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[][]}\n */\nvar divideArray = function(nums, k) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function divideArray(nums: number[], k: number): number[][] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[][]\n     */\n    function divideArray($nums, $k) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func divideArray(_ nums: [Int], _ k: Int) -> [[Int]] {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun divideArray(nums: IntArray, k: Int): Array<IntArray> {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<List<int>> divideArray(List<int> nums, int k) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func divideArray(nums []int, k int) [][]int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[][]}\ndef divide_array(nums, k)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def divideArray(nums: Array[Int], k: Int): Array[Array[Int]] = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn divide_array(nums: Vec<i32>, k: i32) -> Vec<Vec<i32>> {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (divide-array nums k)\n  (-> (listof exact-integer?) exact-integer? (listof (listof exact-integer?)))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec divide_array(Nums :: [integer()], K :: integer()) -> [[integer()]].\ndivide_array(Nums, K) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec divide_array(nums :: [integer], k :: integer) :: [[integer]]\n  def divide_array(nums, k) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func divideArray(nums: Array<Int64>, k: Int64): Array<Array<Int64>> {\n\n    }\n}"}],"testcase":"[1,3,4,8,7,9,3,5,1]\n2","testable":true,"templateMeta":{"name":"divideArray","params":[{"name":"nums","type":"integer[]"},{"type":"integer","name":"k"}],"return":{"type":"integer[][]"}}}