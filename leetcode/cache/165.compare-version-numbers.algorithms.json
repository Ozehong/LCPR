{"id":165,"fid":"165","name":"比较版本号","slug":"compare-version-numbers","link":"https://leetcode.cn/problems/compare-version-numbers/description/","percent":53.78626373911374,"level":"Medium","category":"algorithms","en_name":"Compare Version Numbers","cn_name":"比较版本号","totalAC":"208K","totalSubmit":"386.5K","likes":452,"dislikes":0,"desc":"<p>给你两个 <strong>版本号字符串</strong>&nbsp;<code>version1</code> 和 <code>version2</code> ，请你比较它们。版本号由被点&nbsp;<code>'.'</code> 分开的修订号组成。<strong>修订号的值</strong> 是它 <strong>转换为整数</strong> 并忽略前导零。</p>\n\n<p>比较版本号时，请按 <strong>从左到右的顺序</strong> 依次比较它们的修订号。如果其中一个版本字符串的修订号较少，则将缺失的修订号视为 <code>0</code>。</p>\n\n<p>返回规则如下：</p>\n\n<ul>\n\t<li>如果&nbsp;<code><em>version1&nbsp;</em>&lt;&nbsp;<em>version2</em></code> 返回 <code>-1</code>，</li>\n\t<li>如果&nbsp;<code><em>version1&nbsp;</em>&gt;&nbsp;<em>version2</em></code>&nbsp;返回&nbsp;<code>1</code>，</li>\n\t<li>除此之外返回 <code>0</code>。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">version1 = \"1.2\", version2 = \"1.10\"</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">-1</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>version1 的第二个修订号为&nbsp;\"2\"，version2 的第二个修订号为 \"10\"：2 &lt; 10，所以 version1 &lt; version2。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">version1 = \"1.01\", version2 = \"1.001\"</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">0</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>忽略前导零，\"01\" 和 \"001\" 都代表相同的整数 \"1\"。</p>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong><span class=\"example-io\">version1 = \"1.0\", version2 = \"1.0.0.0\"</span></p>\n\n<p><strong>输出：</strong><span class=\"example-io\">0</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>version1 有更少的修订号，每个缺失的修订号按 \"0\" 处理。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= version1.length, version2.length &lt;= 500</code></li>\n\t<li><code>version1</code> 和 <code>version2</code> 仅包含数字和 <code>'.'</code></li>\n\t<li><code>version1</code> 和 <code>version2</code> 都是 <strong>有效版本号</strong></li>\n\t<li><code>version1</code> 和 <code>version2</code> 的所有修订号都可以存储在 <strong>32 位整数</strong> 中</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int compareVersion(string version1, string version2) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int compareVersion(String version1, String version2) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def compareVersion(self, version1: str, version2: str) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int compareVersion(char* version1, char* version2) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int CompareVersion(string version1, string version2) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} version1\n * @param {string} version2\n * @return {number}\n */\nvar compareVersion = function(version1, version2) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function compareVersion(version1: string, version2: string): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $version1\n     * @param String $version2\n     * @return Integer\n     */\n    function compareVersion($version1, $version2) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func compareVersion(_ version1: String, _ version2: String) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun compareVersion(version1: String, version2: String): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int compareVersion(String version1, String version2) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func compareVersion(version1 string, version2 string) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} version1\n# @param {String} version2\n# @return {Integer}\ndef compare_version(version1, version2)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def compareVersion(version1: String, version2: String): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn compare_version(version1: String, version2: String) -> i32 {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (compare-version version1 version2)\n  (-> string? string? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec compare_version(Version1 :: unicode:unicode_binary(), Version2 :: unicode:unicode_binary()) -> integer().\ncompare_version(Version1, Version2) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec compare_version(version1 :: String.t, version2 :: String.t) :: integer\n  def compare_version(version1, version2) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func compareVersion(version1: String, version2: String): Int64 {\n\n    }\n}"}],"testcase":"\"1.2\"\n\"1.10\"","testable":true,"templateMeta":{"name":"compareVersion","params":[{"name":"version1","type":"string"},{"name":"version2","type":"string"}],"return":{"type":"integer"}}}