{"id":2387,"fid":"2294","name":"划分数组使最大差为 K","slug":"partition-array-such-that-maximum-difference-is-k","link":"https://leetcode.cn/problems/partition-array-such-that-maximum-difference-is-k/description/","percent":69.82867220962459,"level":"Medium","category":"algorithms","en_name":"Partition Array Such That Maximum Difference Is K","cn_name":"划分数组使最大差为 K","totalAC":"22.6K","totalSubmit":"29.6K","likes":41,"dislikes":0,"desc":"<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> 。你可以将 <code>nums</code> 划分成一个或多个 <strong>子序列</strong> ，使 <code>nums</code> 中的每个元素都 <strong>恰好</strong> 出现在一个子序列中。</p>\n\n<p>在满足每个子序列中最大值和最小值之间的差值最多为 <code>k</code> 的前提下，返回需要划分的 <strong>最少</strong> 子序列数目。</p>\n\n<p><strong>子序列</strong> 本质是一个序列，可以通过删除另一个序列中的某些元素（或者不删除）但不改变剩下元素的顺序得到。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [3,6,1,2,5], k = 2\n<strong>输出：</strong>2\n<strong>解释：</strong>\n可以将 nums 划分为两个子序列 [3,1,2] 和 [6,5] 。\n第一个子序列中最大值和最小值的差值是 3 - 1 = 2 。\n第二个子序列中最大值和最小值的差值是 6 - 5 = 1 。\n由于创建了两个子序列，返回 2 。可以证明需要划分的最少子序列数目就是 2 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,2,3], k = 1\n<strong>输出：</strong>2\n<strong>解释：</strong>\n可以将 nums 划分为两个子序列 [1,2] 和 [3] 。\n第一个子序列中最大值和最小值的差值是 2 - 1 = 1 。\n第二个子序列中最大值和最小值的差值是 3 - 3 = 0 。\n由于创建了两个子序列，返回 2 。注意，另一种最优解法是将 nums 划分成子序列 [1] 和 [2,3] 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,2,4,5], k = 0\n<strong>输出：</strong>3\n<strong>解释：</strong>\n可以将 nums 划分为三个子序列 [2,2]、[4] 和 [5] 。\n第一个子序列中最大值和最小值的差值是 2 - 2 = 0 。\n第二个子序列中最大值和最小值的差值是 4 - 4 = 0 。\n第三个子序列中最大值和最小值的差值是 5 - 5 = 0 。\n由于创建了三个子序列，返回 3 。可以证明需要划分的最少子序列数目就是 3 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int partitionArray(vector<int>& nums, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int partitionArray(int[] nums, int k) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def partitionArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def partitionArray(self, nums: List[int], k: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int partitionArray(int* nums, int numsSize, int k) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int PartitionArray(int[] nums, int k) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar partitionArray = function(nums, k) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function partitionArray(nums: number[], k: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function partitionArray($nums, $k) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func partitionArray(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun partitionArray(nums: IntArray, k: Int): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int partitionArray(List<int> nums, int k) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func partitionArray(nums []int, k int) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef partition_array(nums, k)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def partitionArray(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn partition_array(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (partition-array nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec partition_array(Nums :: [integer()], K :: integer()) -> integer().\npartition_array(Nums, K) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec partition_array(nums :: [integer], k :: integer) :: integer\n  def partition_array(nums, k) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func partitionArray(nums: Array<Int64>, k: Int64): Int64 {\n\n    }\n}"}],"testcase":"[3,6,1,2,5]\n2","testable":true,"templateMeta":{"name":"partitionArray","params":[{"name":"nums","type":"integer[]"},{"type":"integer","name":"k"}],"return":{"type":"integer"}}}