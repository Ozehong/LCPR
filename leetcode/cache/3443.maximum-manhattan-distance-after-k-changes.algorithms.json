{"id":3754,"fid":"3443","name":"K 次修改后的最大曼哈顿距离","slug":"maximum-manhattan-distance-after-k-changes","link":"https://leetcode.cn/problems/maximum-manhattan-distance-after-k-changes/description/","percent":48.25634471425963,"level":"Medium","category":"algorithms","en_name":"Maximum Manhattan Distance After K Changes","cn_name":"K 次修改后的最大曼哈顿距离","totalAC":"13.1K","totalSubmit":"21.1K","likes":28,"dislikes":0,"desc":"<p>给你一个由字符 <code>'N'</code>、<code>'S'</code>、<code>'E'</code> 和 <code>'W'</code> 组成的字符串 <code>s</code>，其中 <code>s[i]</code> 表示在无限网格中的移动操作：</p>\n\n<ul>\n\t<li><code>'N'</code>：向北移动 1 个单位。</li>\n\t<li><code>'S'</code>：向南移动 1 个单位。</li>\n\t<li><code>'E'</code>：向东移动 1 个单位。</li>\n\t<li><code>'W'</code>：向西移动 1 个单位。</li>\n</ul>\n\n<p>初始时，你位于原点 <code>(0, 0)</code>。你 <strong>最多</strong> 可以修改 <code>k</code> 个字符为任意四个方向之一。</p>\n\n<p>请找出在 <strong>按顺序</strong> 执行所有移动操作过程中的 <strong>任意时刻</strong> ，所能达到的离原点的&nbsp;<strong>最大曼哈顿距离&nbsp;</strong>。</p>\n\n<p><strong>曼哈顿距离&nbsp;</strong>定义为两个坐标点 <code>(x<sub>i</sub>, y<sub>i</sub>)</code> 和 <code>(x<sub>j</sub>, y<sub>j</sub>)</code> 的横向距离绝对值与纵向距离绝对值之和，即 <code>|x<sub>i</sub> - x<sub>j</sub>| + |y<sub>i</sub> - y<sub>j</sub>|</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><b>示例 1：</b></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>s = \"NWSE\", k = 1</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>3</span></p>\n\n<p><b>解释：</b></p>\n\n<p>将&nbsp;<code>s[2]</code>&nbsp;从&nbsp;<code>'S'</code>&nbsp;改为&nbsp;<code>'N'</code> ，字符串&nbsp;<code>s</code>&nbsp;变为&nbsp;<code>\"NWNE\"</code> 。</p>\n\n<table style=\"border: 1px solid black;\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th style=\"border: 1px solid black;\">移动操作</th>\n\t\t\t<th style=\"border: 1px solid black;\">位置 (x, y)</th>\n\t\t\t<th style=\"border: 1px solid black;\">曼哈顿距离</th>\n\t\t\t<th style=\"border: 1px solid black;\">最大值</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">s[0] == 'N'</td>\n\t\t\t<td style=\"border: 1px solid black;\">(0, 1)</td>\n\t\t\t<td style=\"border: 1px solid black;\">0 + 1 = 1</td>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">s[1] == 'W'</td>\n\t\t\t<td style=\"border: 1px solid black;\">(-1, 1)</td>\n\t\t\t<td style=\"border: 1px solid black;\">1 + 1 = 2</td>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">s[2] == 'N'</td>\n\t\t\t<td style=\"border: 1px solid black;\">(-1, 2)</td>\n\t\t\t<td style=\"border: 1px solid black;\">1 + 2 = 3</td>\n\t\t\t<td style=\"border: 1px solid black;\">3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">s[3] == 'E'</td>\n\t\t\t<td style=\"border: 1px solid black;\">(0, 2)</td>\n\t\t\t<td style=\"border: 1px solid black;\">0 + 2 = 2</td>\n\t\t\t<td style=\"border: 1px solid black;\">3</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>执行移动操作过程中，距离原点的最大曼哈顿距离是 3 。</p>\n</div>\n\n<p><b>示例 2：</b></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>s = \"NSWWEW\", k = 3</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>6</span></p>\n\n<p><b>解释：</b></p>\n\n<p>将&nbsp;<code>s[1]</code>&nbsp;从&nbsp;<code>'S'</code>&nbsp;改为&nbsp;<code>'N'</code> ，将&nbsp;<code>s[4]</code>&nbsp;从&nbsp;<code>'E'</code>&nbsp;改为&nbsp;<code>'W'</code> 。字符串&nbsp;<code>s</code>&nbsp;变为&nbsp;<code>\"NNWWWW\"</code>&nbsp;。</p>\n\n<p>执行移动操作过程中，距离原点的最大曼哈顿距离是 6&nbsp;。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><b>提示：</b></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= s.length</code></li>\n\t<li><code>s</code>&nbsp;仅由&nbsp;<code>'N'</code>、<code>'S'</code>、<code>'E'</code>&nbsp;和&nbsp;<code>'W'</code> 。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maxDistance(string s, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maxDistance(String s, int k) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxDistance(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxDistance(self, s: str, k: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int maxDistance(char* s, int k) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaxDistance(string s, int k) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar maxDistance = function(s, k) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function maxDistance(s: string, k: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxDistance($s, $k) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxDistance(_ s: String, _ k: Int) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxDistance(s: String, k: Int): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int maxDistance(String s, int k) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxDistance(s string, k int) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef max_distance(s, k)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxDistance(s: String, k: Int): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn max_distance(s: String, k: i32) -> i32 {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (max-distance s k)\n  (-> string? exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec max_distance(S :: unicode:unicode_binary(), K :: integer()) -> integer().\nmax_distance(S, K) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec max_distance(s :: String.t, k :: integer) :: integer\n  def max_distance(s, k) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func maxDistance(s: String, k: Int64): Int64 {\n\n    }\n}"}],"testcase":"\"NWSE\"\n1","testable":true,"templateMeta":{"name":"maxDistance","params":[{"name":"s","type":"string"},{"type":"integer","name":"k"}],"return":{"type":"integer"}}}