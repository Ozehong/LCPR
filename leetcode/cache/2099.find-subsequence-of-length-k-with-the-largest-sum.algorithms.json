{"id":2204,"fid":"2099","name":"找到和最大的长度为 K 的子序列","slug":"find-subsequence-of-length-k-with-the-largest-sum","link":"https://leetcode.cn/problems/find-subsequence-of-length-k-with-the-largest-sum/description/","percent":50.08609004652526,"level":"Easy","category":"algorithms","en_name":"Find Subsequence of Length K With the Largest Sum","cn_name":"找到和最大的长度为 K 的子序列","totalAC":"18.5K","totalSubmit":"33.7K","likes":60,"dislikes":0,"desc":"<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;和一个整数&nbsp;<code>k</code>&nbsp;。你需要找到&nbsp;<code>nums</code>&nbsp;中长度为 <code>k</code>&nbsp;的 <strong>子序列</strong>&nbsp;，且这个子序列的&nbsp;<strong>和最大&nbsp;</strong>。</p>\n\n<p>请你返回 <strong>任意</strong> 一个长度为&nbsp;<code>k</code>&nbsp;的整数子序列。</p>\n\n<p><strong>子序列</strong>&nbsp;定义为从一个数组里删除一些元素后，不改变剩下元素的顺序得到的数组。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums = [2,1,3,3], k = 2\n<b>输出：</b>[3,3]\n<strong>解释：</strong>\n子序列有最大和：3 + 3 = 6 。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [-1,-2,3,4], k = 3\n<b>输出：</b>[-1,3,4]\n<b>解释：</b>\n子序列有最大和：-1 + 3 + 4 = 6 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>nums = [3,4,3,3], k = 2\n<b>输出：</b>[3,4]\n<strong>解释：</strong>\n子序列有最大和：3 + 4 = 7 。\n另一个可行的子序列为 [4, 3] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>-10<sup>5</sup>&nbsp;&lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= nums.length</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> maxSubsequence(vector<int>& nums, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] maxSubsequence(int[] nums, int k) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxSubsequence(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxSubsequence(self, nums: List[int], k: int) -> List[int]:\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* maxSubsequence(int* nums, int numsSize, int k, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] MaxSubsequence(int[] nums, int k) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxSubsequence = function(nums, k) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function maxSubsequence(nums: number[], k: number): number[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function maxSubsequence($nums, $k) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxSubsequence(_ nums: [Int], _ k: Int) -> [Int] {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxSubsequence(nums: IntArray, k: Int): IntArray {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> maxSubsequence(List<int> nums, int k) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxSubsequence(nums []int, k int) []int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef max_subsequence(nums, k)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxSubsequence(nums: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn max_subsequence(nums: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (max-subsequence nums k)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec max_subsequence(Nums :: [integer()], K :: integer()) -> [integer()].\nmax_subsequence(Nums, K) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec max_subsequence(nums :: [integer], k :: integer) :: [integer]\n  def max_subsequence(nums, k) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func maxSubsequence(nums: Array<Int64>, k: Int64): Array<Int64> {\n\n    }\n}"}],"testcase":"[2,1,3,3]\n2","testable":true,"templateMeta":{"name":"maxSubsequence","params":[{"name":"nums","type":"integer[]"},{"type":"integer","name":"k"}],"return":{"type":"integer[]"}}}