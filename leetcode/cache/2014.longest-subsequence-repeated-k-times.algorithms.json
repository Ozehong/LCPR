{"id":2140,"fid":"2014","name":"重复 K 次的最长子序列","slug":"longest-subsequence-repeated-k-times","link":"https://leetcode.cn/problems/longest-subsequence-repeated-k-times/description/","percent":55.306647080426,"level":"Hard","category":"algorithms","en_name":"Longest Subsequence Repeated k Times","cn_name":"重复 K 次的最长子序列","totalAC":"8.7K","totalSubmit":"12.5K","likes":49,"dislikes":0,"desc":"<p>给你一个长度为 <code>n</code> 的字符串 <code>s</code> ，和一个整数 <code>k</code> 。请你找出字符串 <code>s</code> 中 <strong>重复</strong> <code>k</code> 次的 <strong>最长子序列</strong> 。</p>\n\n<p><strong>子序列</strong> 是由其他字符串删除某些（或不删除）字符派生而来的一个字符串。</p>\n\n<p>如果&nbsp;<code>seq * k</code> 是 <code>s</code> 的一个子序列，其中 <code>seq * k</code> 表示一个由 <code>seq</code> 串联 <code>k</code>&nbsp;次构造的字符串，那么就称 <code>seq</code><strong> </strong>是字符串 <code>s</code> 中一个 <strong>重复 <code>k</code> 次</strong> 的子序列。</p>\n\n<ul>\n\t<li>举个例子，<code>\"bba\"</code> 是字符串 <code>\"bababcba\"</code> 中的一个重复 <code>2</code> 次的子序列，因为字符串 <code>\"bbabba\"</code> 是由 <code>\"bba\"</code> 串联 <code>2</code> 次构造的，而&nbsp;<code>\"bbabba\"</code> 是字符串 <code>\"<em><strong>b</strong></em>a<em><strong>bab</strong></em>c<em><strong>ba</strong></em>\"</code> 的一个子序列。</li>\n</ul>\n\n<p>返回字符串 <code>s</code> 中 <strong>重复 k 次的最长子序列</strong>&nbsp; 。如果存在多个满足的子序列，则返回 <strong>字典序最大</strong> 的那个。如果不存在这样的子序列，返回一个 <strong>空</strong> 字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"example 1\" src=\"https://assets.leetcode.com/uploads/2021/08/30/longest-subsequence-repeat-k-times.png\" style=\"width: 457px; height: 99px;\" /></p>\n\n<pre>\n<strong>输入：</strong>s = \"letsleetcode\", k = 2\n<strong>输出：</strong>\"let\"\n<strong>解释：</strong>存在两个最长子序列重复 2 次：let\" 和 \"ete\" 。\n\"let\" 是其中字典序最大的一个。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"bb\", k = 2\n<strong>输出：</strong>\"b\"\n<strong>解释：</strong>重复 2 次的最长子序列是 \"b\" 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"ab\", k = 2\n<strong>输出：</strong>\"\"\n<strong>解释：</strong>不存在重复 2 次的最长子序列。返回空字符串。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == s.length</code></li>\n\t<li><code>2 &lt;= k &lt;= 2000</code></li>\n\t<li><code>2 &lt;= n &lt; k * 8</code></li>\n\t<li><code>s</code> 由小写英文字母组成</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string longestSubsequenceRepeatedK(string s, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String longestSubsequenceRepeatedK(String s, int k) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def longestSubsequenceRepeatedK(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def longestSubsequenceRepeatedK(self, s: str, k: int) -> str:\n        "},{"value":"c","text":"C","defaultCode":"char* longestSubsequenceRepeatedK(char* s, int k) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string LongestSubsequenceRepeatedK(string s, int k) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar longestSubsequenceRepeatedK = function(s, k) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function longestSubsequenceRepeatedK(s: string, k: number): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return String\n     */\n    function longestSubsequenceRepeatedK($s, $k) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func longestSubsequenceRepeatedK(_ s: String, _ k: Int) -> String {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun longestSubsequenceRepeatedK(s: String, k: Int): String {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String longestSubsequenceRepeatedK(String s, int k) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func longestSubsequenceRepeatedK(s string, k int) string {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef longest_subsequence_repeated_k(s, k)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def longestSubsequenceRepeatedK(s: String, k: Int): String = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn longest_subsequence_repeated_k(s: String, k: i32) -> String {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (longest-subsequence-repeated-k s k)\n  (-> string? exact-integer? string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec longest_subsequence_repeated_k(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\nlongest_subsequence_repeated_k(S, K) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec longest_subsequence_repeated_k(s :: String.t, k :: integer) :: String.t\n  def longest_subsequence_repeated_k(s, k) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func longestSubsequenceRepeatedK(s: String, k: Int64): String {\n\n    }\n}"}],"testcase":"\"letsleetcode\"\n2","testable":true,"templateMeta":{"name":"longestSubsequenceRepeatedK","params":[{"name":"s","type":"string"},{"type":"integer","name":"k"}],"return":{"type":"string"}}}