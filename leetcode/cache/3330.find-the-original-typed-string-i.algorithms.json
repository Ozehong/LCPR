{"id":3617,"fid":"3330","name":"找到初始输入字符串 I","slug":"find-the-original-typed-string-i","link":"https://leetcode.cn/problems/find-the-original-typed-string-i/description/","percent":69.32016269610692,"level":"Easy","category":"algorithms","en_name":"Find the Original Typed String I","cn_name":"找到初始输入字符串 I","totalAC":"14K","totalSubmit":"18.6K","likes":14,"dislikes":0,"desc":"<p>Alice 正在她的电脑上输入一个字符串。但是她打字技术比较笨拙，她&nbsp;<strong>可能</strong>&nbsp;在一个按键上按太久，导致一个字符被输入&nbsp;<strong>多次</strong>&nbsp;。</p>\n\n<p>尽管 Alice 尽可能集中注意力，她仍然可能会犯错 <strong>至多</strong>&nbsp;一次。</p>\n\n<p>给你一个字符串&nbsp;<code>word</code> ，它表示 <strong>最终</strong>&nbsp;显示在 Alice 显示屏上的结果。</p>\n\n<p>请你返回 Alice 一开始可能想要输入字符串的总方案数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>word = \"abbcccc\"</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>5</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>可能的字符串包括：<code>\"abbcccc\"</code>&nbsp;，<code>\"abbccc\"</code>&nbsp;，<code>\"abbcc\"</code>&nbsp;，<code>\"abbc\"</code>&nbsp;和&nbsp;<code>\"abcccc\"</code>&nbsp;。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>word = \"abcd\"</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>1</span></p>\n\n<p><strong>解释：</strong></p>\n\n<p>唯一可能的字符串是&nbsp;<code>\"abcd\"</code>&nbsp;。</p>\n</div>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<div class=\"example-block\">\n<p><span class=\"example-io\"><b>输入：</b>word = \"aaaa\"</span></p>\n\n<p><span class=\"example-io\"><b>输出：</b>4</span></p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 100</code></li>\n\t<li><code>word</code>&nbsp;只包含小写英文字母。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int possibleStringCount(string word) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int possibleStringCount(String word) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def possibleStringCount(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int possibleStringCount(char* word) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int PossibleStringCount(string word) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} word\n * @return {number}\n */\nvar possibleStringCount = function(word) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function possibleStringCount(word: string): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function possibleStringCount($word) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func possibleStringCount(_ word: String) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun possibleStringCount(word: String): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int possibleStringCount(String word) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func possibleStringCount(word string) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} word\n# @return {Integer}\ndef possible_string_count(word)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def possibleStringCount(word: String): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn possible_string_count(word: String) -> i32 {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (possible-string-count word)\n  (-> string? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec possible_string_count(Word :: unicode:unicode_binary()) -> integer().\npossible_string_count(Word) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec possible_string_count(word :: String.t) :: integer\n  def possible_string_count(word) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func possibleStringCount(word: String): Int64 {\n\n    }\n}"}],"testcase":"\"abbcccc\"","testable":true,"templateMeta":{"name":"possibleStringCount","params":[{"name":"word","type":"string"}],"return":{"type":"integer"}}}