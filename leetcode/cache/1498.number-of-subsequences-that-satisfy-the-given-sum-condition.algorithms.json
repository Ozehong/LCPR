{"id":1621,"fid":"1498","name":"满足条件的子序列数目","slug":"number-of-subsequences-that-satisfy-the-given-sum-condition","link":"https://leetcode.cn/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/description/","percent":39.73124966203428,"level":"Medium","category":"algorithms","en_name":"Number of Subsequences That Satisfy the Given Sum Condition","cn_name":"满足条件的子序列数目","totalAC":"23.7K","totalSubmit":"52.1K","likes":191,"dislikes":0,"desc":"<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>target</code> 。</p>\n\n<p>请你统计并返回 <code>nums</code> 中能满足其最小元素与最大元素的 <strong>和</strong> 小于或等于 <code>target</code> 的 <strong>非空</strong> 子序列的数目。</p>\n\n<p>由于答案可能很大，请将结果对<meta charset=\"UTF-8\" />&nbsp;<code>10<sup>9</sup>&nbsp;+ 7</code>&nbsp;取余后返回。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [3,5,6,7], target = 9\n<strong>输出：</strong>4\n<strong>解释：</strong>有 4 个子序列满足该条件。\n[3] -&gt; 最小元素 + 最大元素 &lt;= target (3 + 3 &lt;= 9)\n[3,5] -&gt; (3 + 5 &lt;= 9)\n[3,5,6] -&gt; (3 + 6 &lt;= 9)\n[3,6] -&gt; (3 + 6 &lt;= 9)\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [3,3,6,8], target = 10\n<strong>输出：</strong>6\n<strong>解释：</strong>有 6 个子序列满足该条件。（nums 中可以有重复数字）\n[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,3,3,4,6,7], target = 12\n<strong>输出：</strong>61\n<strong>解释：</strong>共有 63 个非空子序列，其中 2 个不满足条件（[6,7], [7]）\n有效序列总数为（63 - 2 = 61）\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= target &lt;= 10<sup>6</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numSubseq(vector<int>& nums, int target) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numSubseq(int[] nums, int target) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numSubseq(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numSubseq(self, nums: List[int], target: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int numSubseq(int* nums, int numsSize, int target) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumSubseq(int[] nums, int target) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar numSubseq = function(nums, target) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function numSubseq(nums: number[], target: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function numSubseq($nums, $target) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numSubseq(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numSubseq(nums: IntArray, target: Int): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int numSubseq(List<int> nums, int target) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func numSubseq(nums []int, target int) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef num_subseq(nums, target)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numSubseq(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn num_subseq(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (num-subseq nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec num_subseq(Nums :: [integer()], Target :: integer()) -> integer().\nnum_subseq(Nums, Target) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec num_subseq(nums :: [integer], target :: integer) :: integer\n  def num_subseq(nums, target) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func numSubseq(nums: Array<Int64>, target: Int64): Int64 {\n\n    }\n}"}],"testcase":"[3,5,6,7]\n9","testable":true,"templateMeta":{"name":"numSubseq","params":[{"name":"nums","type":"integer[]"},{"type":"integer","name":"target"}],"return":{"type":"integer"}}}